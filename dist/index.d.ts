// Generated by dts-bundle-generator v9.5.1

declare class GoogleDrive {
	private parentFolder;
	private credential;
	private storage;
	constructor(credential: GoogleAuthCredential, parent: string);
	private getToken;
	create(file: File): Promise<string>;
	remove(fileId: string): Promise<boolean>;
	filter(): Promise<{
		id: string;
		name: string;
	}[] | undefined>;
}
declare class GoogleDatabase {
	private databaseURL;
	private credential;
	private accessToken;
	private tokenExpiry;
	constructor(credential: GoogleAuthCredential, databaseURL: string);
	private getToken;
	findAll<T = any>(path: string): Promise<T | null>;
	create<T = any>(path: string, data: T): Promise<T | null>;
	remove(path: string): Promise<boolean>;
	query<T = any>(path: string, queryParams: Record<"orderBy" | "equalTo", string>): Promise<T | null>;
	transaction<T = any>(path: string, updateFn: (currentData: T) => T): Promise<T | null>;
}
export type GoogleAuthCredential = {
	client_email: string;
	private_key: string;
} | {
	[key: string]: string;
};
export declare class GoogleAuth {
	private credential;
	constructor(credential: GoogleAuthCredential);
	drive(folderID: string): GoogleDrive;
	database(databaseURL: string): GoogleDatabase;
}

export {};
