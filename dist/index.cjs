var{defineProperty:g,getOwnPropertyNames:b,getOwnPropertyDescriptor:v}=Object,S=Object.prototype.hasOwnProperty;var d=new WeakMap,k=(e)=>{var t=d.get(e),r;if(t)return t;if(t=g({},"__esModule",{value:!0}),e&&typeof e==="object"||typeof e==="function")b(e).map((n)=>!S.call(t,n)&&g(t,n,{get:()=>e[n],enumerable:!(r=v(e,n))||r.enumerable}));return d.set(e,t),t};var T=(e,t)=>{for(var r in t)g(e,r,{get:t[r],enumerable:!0,configurable:!0,set:(n)=>t[r]=()=>n})};var G={};T(G,{GoogleAuth:()=>f});module.exports=k(G);function C(e){let t=e.replace(/-----BEGIN PRIVATE KEY-----/,"").replace(/-----END PRIVATE KEY-----/,"").replace(/\n/g,"").trim(),r=atob(t),n=new Uint8Array(r.length);for(let i=0;i<r.length;i++)n[i]=r.charCodeAt(i);return n.buffer}async function E(e,t,r){let n={alg:"RS256",typ:"JWT"},i=Math.floor(Date.now()/1000),o={iss:e,scope:r,aud:"https://oauth2.googleapis.com/token",exp:i+3600,iat:i},s=(A)=>btoa(JSON.stringify(A)).replace(/=/g,"").replace(/\+/g,"-").replace(/\//g,"_"),a=new TextEncoder,w=C(t),y=await crypto.subtle.importKey("pkcs8",w,{name:"RSASSA-PKCS1-v1_5",hash:"SHA-256"},!1,["sign"]),h=`${s(n)}.${s(o)}`,u=await crypto.subtle.sign("RSASSA-PKCS1-v1_5",y,a.encode(h)),m=btoa(String.fromCharCode(...new Uint8Array(u))).replace(/=/g,"").replace(/\+/g,"-").replace(/\//g,"_");return`${h}.${m}`}async function c(e,t,r){let n=await E(e,t,r),o=await(await fetch("https://oauth2.googleapis.com/token",{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({assertion:n,grant_type:"urn:ietf:params:oauth:grant-type:jwt-bearer"})})).json();if(o&&typeof o.access_token=="string")return o.access_token;return}class l{parentFolder="";credential={};storage={};constructor(e,t){this.credential=e,this.parentFolder=t}async getToken(){let e=Date.now();if(this.storage.token&&e<this.storage.expireAt)return this.storage.token;return this.storage.token=await c(this.credential.client_email,this.credential.private_key,"https://www.googleapis.com/auth/drive"),this.storage.expireAt=e+3600000,this.storage.token}async create(e){let t=new FormData;t.append("metadata",new Blob([JSON.stringify({name:e.name,mimeType:e.type,parents:this.parentFolder})],{type:"application/json"})),t.append("file",e);let r=await this.getToken(),n=await fetch("https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart",{body:t,method:"POST",headers:{Authorization:`Bearer ${r}`}}),{id:i}=await n.json();return i}async remove(e){let t=await this.getToken();try{return await fetch(`https://www.googleapis.com/drive/v3/files/${e}`,{method:"DELETE",headers:{Authorization:`Bearer ${t}`}}),!0}catch{return!1}}async filter(){let e=await this.getToken();try{let r=await(await fetch("https://www.googleapis.com/drive/v3/files?q='me' in owners&fields=files(id, name)",{method:"GET",headers:{Authorization:`Bearer ${e}`}})).json();if(r&&Array.isArray(r.files))return r.files;return}catch{return}}}class p{databaseURL;credential;accessToken=null;tokenExpiry=0;constructor(e,t){this.credential=e,this.databaseURL=t}async getToken(){let e=Date.now();if(this.accessToken&&e<this.tokenExpiry)return this.accessToken;return this.accessToken=await c(this.credential.client_email,this.credential.private_key,"https://www.googleapis.com/auth/firebase.database"),this.tokenExpiry=e+3600000,this.accessToken}async findAll(e){let t=await this.getToken(),r=await fetch(`${this.databaseURL}/${e}.json`,{headers:{Authorization:`Bearer ${t}`}});return r.ok?await r.json():null}async create(e,t){let r=await this.getToken();return(await fetch(`${this.databaseURL}/${e}.json`,{method:"PUT",headers:{Authorization:`Bearer ${r}`,"Content-Type":"application/json"},body:JSON.stringify(t)})).ok?t:null}async remove(e){let t=await this.getToken();return(await fetch(`${this.databaseURL}/${e}.json`,{method:"DELETE",headers:{Authorization:`Bearer ${t}`}})).ok}async query(e,t){let r=await this.getToken(),n=new URLSearchParams(t).toString(),i=await fetch(`${this.databaseURL}/${e}.json?${n}`,{headers:{Authorization:`Bearer ${r}`}});return i.ok?await i.json():null}async transaction(e,t){try{let r=await this.getToken(),n=`${this.databaseURL}/${e}.json`,i=await fetch(n,{method:"GET",headers:{Authorization:`Bearer ${r}`}});if(!i.ok)throw new Error(`Error fetching data: ${i.statusText}`);let o=await i.json(),s=t(o),a=await fetch(n,{method:"PUT",headers:{Authorization:`Bearer ${r}`,"Content-Type":"application/json"},body:JSON.stringify(s)});if(!a.ok)throw new Error(`Error updating data: ${a.statusText}`);return await a.json()}catch(r){return console.error("Transaction failed:",r),null}}}class f{credential={};constructor(e){this.credential=e}drive(e){return new l(this.credential,e)}database(e){return new p(this.credential,e)}}
